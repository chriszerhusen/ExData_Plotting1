sample(x,5)
sample(x,3,replace=TRUE)
sample(x,3,replace=TRUE)
sample(x,3,replace=TRUE)
sample(x,3,replace=TRUE)
sample(x,3,replace=TRUE)
sample(x,3,replace=TRUE)
sample(x,12,replace=TRUE)
x=1:6
y=sample(x,12,replace=true)
y=sample(x,12,replace=TRUE)
matrix(y,3,4)
x=sample(1:6,3,replace=TRUE)
x
x==6
x<6
x=sample(1:6,1000,replace=TRUE)
sum(x==6)
x=matrix(sample(1:6,4*10,replace=TRUE)nrow=4, ncol=10)
x=matrix(sample(1:6,4*10,replace=TRUE), nrow=4, ncol=10)
y=(x==6)
y
z=colSums(y)
z
sum(y)
x
z>0
mean(z>0)
x=(sample(1:6,4*1000,replace=TRUE),nrow=4,ncol=1000)
x=(sample(1:6,4*1000,replace=TRUE), nrow=4, ncol=1000)
x=(sample(1:6,4*1000,replace=TRUE) nrow=4, ncol=1000)
x=matrix(sample(1:6,4*1000,replace=TRUE), nrow=4, ncol=1000)
y=(x==6)
z=colSums(y)
sum(z)
mean(z>0)
sum(z>0)
dim(x)
x=matrix(sample(1:6,2*10000,replace=TRUE), nrow=2, ncol=10000)
y=colSums(x)
z=(y==7)
mean(z)
x=matrix(sample(1:6,20000,replace=TRUE),nrow=2,ncol=10000)
y=colSums(x)
mean(y==12)
permutations
source(’colMatches.r’)
# File:   colMatches.r
colMatchesHelp = function()
{
cat("# --------------------------------------------------\n")
cat("Syntax: colMatches(A,szmatch)\n")
cat("For each column in array A checks if at least one entry is\n")
cat("repeated n times\n")
cat("\n")
cat("A = array\n")
cat("szmatch = the number of matches \n")
cat("\n")
cat("Returns a vector of 0's and 1's: 1 means at least\n")
cat("one entry was repeated at least szmatch times.\n")
cat("# --------------------------------------------------\n")
}
colMatches = function(A,szmatch=2)
{
# See colMatchesHelp()
#RED_FLAG: We assume A is a vector or 2 dimensional array
#RED_FLAG: We don't check that szmatch > 0
A.dim=dim(A)
if (is.null(A.dim))
{
#assume A is a column vector
nrows = length(A)
ncols = 1
Asrt= matrix(sort(A),nrow=nrows,ncol=ncols)
}
else
{
nrows=A.dim[1]
ncols = A.dim[2]
#apply() is an r-magic function. In this case it applies sort to each column. To apply to each row use apply(A,1,sort)
Asrt = apply(A,2,sort)
}
if (szmatch > nrows)
{
#Can't possibly have more matches than rows, return a vector of 0's
b = rep(0,times=ncols)
}
else
{
#Sneaky way to look for runs of szmatch in sorted columns
x= Asrt[szmatch:nrows,] == Asrt[1:(nrows-szmatch+1),]
if (ncols == 1)
b = 1.*(sum(x) > 0)
else if (szmatch == nrows)
b=as.vector(1.*x)
else
b=as.vector(1.*(apply(x,2,sum) >0))
}
return(b)
}
source(’colMatches.r’) # Set up the parameters
ndays = 365
npeople = 20
ntrials = 10000
sizematch = 2
ndays = 365
npeople = 20
ntrials = 10000
sizematch = 2
year = 1:ndays
y = sample(year, npeople*ntrials, replace=TRUE)
trials = matrix(y, nrow=npeople, ncol=ntrials)
w = colMatches(trials,sizematch) prob B = mean(w)
prob B
install.packages("KernSmooth")
library(KernSmooth)
install.packages(c("slidify","ggplot2"))
library(ggplot2)
getwd()
install.packages("swirl")
getwd()
library("swirl")
swirl()
install.packages("swirl")
library("swirl")
swirl()
5+7
x<-5+7
x
y<-x+3
y<-x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1:4) + c(0:10)
c(1:4) + c(0, 10)
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_div
library("swirl")
swirl()
getwd()
ls()
x <_ 9
x <- 9
ls()
list.files()
dir()
?list.files
args(list.files())
args(list.files)
old.dir <- getwd()
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.r")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R)"
?file.exists
?file.exists()
)
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path('folder1', 'folder2')
?dir.create
dir.create('testdir2', 'testdir3',recursive = TRUE)
dir.create(file.path('testdir2', 'testdir3')
, recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10, by=.5)
seq(5,10,length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(1,2,3), times=10)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Chris")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3, "X", "Y". "Z"), sep = "")
paste(1:3, c("X", "Y". "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep="-")
c(44, NA, 5, NA)
x <- c(44, NA, 5, NA)
3*x
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
play()
nxt()
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x ]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
play()
x[!c(2,10)]
nxt()
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?"matrix"
?matrix
matrix(1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.fram(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames, my_data)
?colnames
colnames(my_data) <- cnames
my_data
library("swirl")
swirl()
sys.date()
Sys.Date()
mean(c,2,4,5)
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){max(x)}, c(8,4,0))
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[3]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("What", "the", "fuck?")
submit()
mad_libs(names(c("the park", "funny", "telegram")) = c("place", "adjective", "noun"))
mad_libs(names(c("the park", "funny", "telegram") = c("place", "adjective", "noun")))
mad_libs(names(c("the park", "funny", "telegram")) = c("place", "adjective", "noun"))
mad_libs()
mad_libs("the park", "funny", "telegram")
mad_libs(names("the park") = "place", names("funny") = "adjective", names("telegram") = "noun")
mad_libs(names("the park") <- "place", names("funny") <- "adjective", names("telegram") <- "noun")
?names
submit()
play()
mad_libs("the park", "funny", "telegram")
nxt()
submit()
"I" %p% "love" %p% "R!"
library("swirl")
swirl()
for(i in 1:10){print(i)}
x <- c("a","b","c","d")
for(letter in x){print(letter)}
y <- c(1,2,3,4)
for(number in x){print(number)}
for(number in y){print(number)}
?rbinom
rbinom(1,1,.5)
rbinom(1,2,.5)
rbinom(1,2,.5)
rbinom(1,2,.5)
rbinom(2,1,.5)
rbinom(2,1,.5)
rbinom(2,1,.5)
rbinom(2,1,.5)
rbinom(10,1,.5)
rbinom(10,10,.5)
rbinom(10,10,.5)
rbinom(10,10,.5)
rbinom(10,10,.5)
add2 <- function(x,y){
x + y
}
add2(3,5)
above10 <- function(x){
use <- x > 10
x[use]
}
above10(c(1,5,82,3,27,19,4))
rnorm(100)
sd(rnorm(100))
sd(rnorm(100))
sd(rnorm(100))
sd(rnorm(100))
?rnorm
dnorm(c(1,2,3))
?lm
library(datasets)
head(airquality)
?head
s <- split(airquality, airquality$Month)
s
?split
library(datasets)
data(iris)
mean(iris$Sepal.Length)
head(iris)
with(iris, tapply(iris, Species, mean))
virginica <- iris[virginica]
virginica <- iris[virginica,]
iris
mean(iris$Sepal.Length[101:150])
data(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
hp <- sapply(split(mtcars$hp, mtcars$cyl), mean)
hp[3] - hp[1]
?xyplot
library(lattice)
library(datasets)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
airquality <- transform(airquality, Month = factor(months()))
airquality <- transform(airquality, Month = factor(Month)
)
boxplot(Ozone~Month, airquality, xlab = "Month")
colors()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
rm(airquality)
with(airquality, plot(Wind,Ozone, main = "Ozone and Wind in New York City", type = "n"))
?with
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month != 5), points(Wind, Ozone, col = "red"))
legend("topright", pch = 1, col = c("blue", "red"), legend = c("May", "Other Months"))
points(pch = 2)
with(airquality, plot(Wind,Ozone, main = "Ozone and Wind in New York City", pch = 20))
with(airquality, plot(Wind,Ozone, main = "Ozone and Wind in New York City", pch = 2))
with(airquality, plot(Wind,Ozone, main = "Ozone and Wind in New York City", pch = 3))
with(airquality, plot(Wind,Ozone, main = "Ozone and Wind in New York City", pch = 4))
with(airquality, plot(Wind,Ozone, main = "Ozone and Wind in New York City", pch = 5))
with(airquality, plot(Wind,Ozone, main = "Ozone and Wind in New York City", pch = 6))
with(airquality, plot(Wind,Ozone, main = "Ozone and Wind in New York City", pch = 7))
with(airquality, plot(Wind,Ozone, main = "Ozone and Wind in New York City", pch = 8))
with(airquality, plot(Wind,Ozone, main = "Ozone and Wind in New York City", pch = "tt"))
with(airquality, plot(Wind,Ozone, main = "Ozone and Wind in New York City", pch = 9))
with(airquality, plot(Wind,Ozone, main = "Ozone and Wind in New York City", pch = 10))
with(airquality, plot(Wind,Ozone, main = "Ozone and Wind in New York City", pch = 11))
with(airquality, plot(Wind,Ozone, main = "Ozone and Wind in New York City", pch = 12))
with(airquality, plot(Wind,Ozone, main = "Ozone and Wind in New York City", pch = 19))
with(airquality, plot(Wind,Ozone, main = "Ozone and Wind in New York City", pch = 20))
model <- lm(Ozone~Wind, airquality)
abline(model, lwd = 2)
model
?par
x <- rnorm(100)
hist(x)
y <- rnorm(100)
hist(y)
plot(x,y)
z <- rnorm(100)
plot(x,z)
plot(x,y)
par(mar = c(2,2,2,2))
plot(x,y)
par(mar = c(4,4,2,2))
plot(x,y)
example(points)
plot(x,y)
x <- rnorm(100)
y <- rnorm(100)
par(mar = c(4,4,2,2))
plot(x,y)
plot(x,y,pch=20)
title("Scatterplot")
text(-2,-2,"Label")
par(mar = c(2,2,2,2))
plot(x,y)
par(mar = c(4,2,2,2))
plot(x,y)
fit <- lm(y~x)
abline(fit)
abline(fit, lwd = 3, col = blue)
abline(fit, lwd = 3, col = "blue")
plot(x,y,pch=20)
abline(fit, lwd=2, col="red")
z <- rpois(100,2)
z
par(mfrow = c(2,1))
plot(x,y,pch=20)
plot(x,z,pch = 20)
par(mar = c(2,2,1,1))
plot(x,z,pch = 20)
plot(x,y,pch=20)
par(mfrow = c(1,1))
x <-rnorm(100)
y <- x + rnorm(100)
g <- gl(2,50, labels = c("Male", "Female"))
g
plot(x,y)
plot(x, y, type = "n")
points(x[g == "Male"], y[g == "Male"], col = "green")
points(x[g == "Female"], y[g == "Female"], col = "pink")
points(x[g == "Female"], y[g == "Female"], col = "red")
?var
x <- c(-4,1,1,1,1)
var(x)
n <- 20
pvals <- seq(.1,.9, by = .05)
pvals
?seq
nosim <- 1000
coverage <- sapply(pvals, function(p)){
phats <- rbinom(nosim, prob = p, size = n)/n
ll <- phats - qnorm(0.975)*sqrt(phats*(1-phats)/n)
ul <- phats + qnorm(0.975)*sqrt(phats*(1-phats)/n)
mean(ll < p & ul > p)
}
coverage <- sapply(pvals, function(p){
phats <- rbinom(nosim, prob = p, size = n)/n
ll <- phats - qnorm(0.975)*sqrt(phats*(1-phats)/n)
ul <- phats + qnorm(0.975)*sqrt(phats*(1-phats)/n)
mean(ll < p & ul > p)
})
coverage
plot(coverage)
75*1.645
?pbinom
pbinom(c(4,5), 5, .5)
pbinom(c(4,5), 5, .5, lower.tail = FALSE)
2^5
1/32+5/32
pbinom(3, 5, .5, lower.tail = FALSE)
?pnorm
pnorm(1)-pnorm(-1)
?pois
?rpois
ppois(10, .6)
ppois(10, 15)
setwd("C:/Users/Chris/CourseraDataScience/ExploratoryAnalysis/Week1/ExData_Plotting1")
ls()
file.show()
